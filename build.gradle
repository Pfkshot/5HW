plugins {
    id 'java'
    id 'io.qameta.allure' version '2.8.1'
}

repositories {
    // Repository is needed for downloading allure-commandline for building the report
    mavenCentral()
}

allure {
    version = '2.14.0'
    autoconfigure = true
    configuration = "testImplementation"
}


group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'io.appium', name: 'java-client', version: '7.5.1'
    testImplementation group: 'junit', name: 'junit', version: '4.13'

    testImplementation 'org.aspectj:aspectjweaver:1.9.5'
    testImplementation group: 'io.qameta.allure', name: 'allure-junit5', version: '2.13.8'
    testImplementation group: 'io.qameta.allure', name: 'allure-junit4', version: '2.22.2'
    testImplementation group: 'io.qameta.allure', name: 'allure-commandline', version: '2.13.8'
    testImplementation group: 'io.qameta.allure', name: 'allure-assertj', version: '2.13.8'
    testImplementation group: 'io.qameta.allure', name: 'allure-rest-assured', version: '2.13.8'
    testImplementation group: 'io.qameta.allure', name: 'allure-java-commons', version: '2.13.8'


}

task generateAllureReport(type: Exec) {
    executable "bash"
    args "-c", "allure generate build/allure-results --clean -o allure-reports"
    doLast {
        def file = project.file('allure-reports/index.html').getAbsolutePath().toURI()
        project.logger.lifecycle("Allure report at: file://" + file)
    }
}
test.finalizedBy(generateAllureReport)


test {
    useJUnitPlatform()
}